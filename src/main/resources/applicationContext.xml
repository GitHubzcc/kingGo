<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd"
       default-lazy-init="true">

    <context:component-scan base-package="com.go">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- jdbc.properteis 指定数据源路径 -->
    <context:property-placeholder location="classpath*:/conf/dev/system.properties" ignore-resource-not-found="true"
                                  ignore-unresolvable="true"/>

    <context:component-scan base-package="com.go">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- DataSource 配置数据源 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialPoolSize" value="${connection_pools.initial_pool_size}"/>
        <property name="minPoolSize" value="${connection_pools.min_pool_size}"/>
        <property name="maxPoolSize" value="${connection_pools.max_pool_size}"/>
        <property name="maxIdleTime" value="${connection_pools.max_idle_time}"/>
        <property name="acquireIncrement" value="${connection_pools.acquire_increment}"/>
        <property name="checkoutTimeout" value="${connection_pools.checkout_timeout}"/>
    </bean>

    <!-- 配置事务开始 -->
    <bean id="proxyDataSource"
          class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg>
            <ref bean="dataSource"/>
        </constructor-arg>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="proxyDataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 配置事务结束 -->


    <!-- 发送邮件开始 -->
    <!--<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.qq.com"/>
        <property name="port" value="587"/>
        <property name="username" value="822261058@qq.com"/>
        <property name="password" value="vwyegbzlljmqbcdb"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.timeout">25000</prop>
            </props>
        </property>
    </bean>

    <bean id="simpleMailMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value="822261058@qq.com"/>
        <property name="subject" value="发送邮件验证码"/>
    </bean>-->
    <!-- 发送邮件结束 -->


    <!--<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
                <prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
                <prop key="mail.smtp.starttls.enable">${mail.smtp.starttls.enable}</prop>
                &lt;!&ndash;
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                &ndash;&gt;
            </props>
        </property>
    </bean>-->


    <!--<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="${task.core_pool_size}"/>
        <property name="maxPoolSize" value="${task.max_pool_size}"/>
        <property name="queueCapacity" value="${task.queue_capacity}"/>
        <property name="keepAliveSeconds" value="${task.keep_alive_seconds}"/>
    </bean>

    <task:annotation-driven executor="taskExecutor"/>-->

    <!--<aop:aspectj-autoproxy proxy-target-class="true" />-->

    <!-- redis -->
    <!--<bean id="jedisPool" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxTotal" value="${redis.maxActive}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="true"/>
    </bean>
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="usePool" value="true"/>
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="password" value="${redis.pass}"/>
        <property name="timeout" value="${redis.timeout}"/>
        &lt;!&ndash;   <property name="database" value="${redis.default.db}"></property> &ndash;&gt;
        <constructor-arg index="0" ref="jedisPool"/>
    </bean>
    &lt;!&ndash; redis 模板  &ndash;&gt;
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>-->


</beans>